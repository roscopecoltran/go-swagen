// Code generated by go-bindata.
// sources:
// templates/request.tmpl
// templates/schema.tmpl
// templates/service.tmpl
// DO NOT EDIT!

package typescript

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\x7b\xa7\xf8\x47\x05\x27\xa8\x13\x78\x75\x83\x62\xa3\xe4\xf2\x53\x9b\x08\x8a\xb8\xbb\x4f\xee\x66\x3d\xa0\x0c\xe9\x7b\xd9\x04\xcb\x2a\xe7\x25\x1e\x78\x13\xe0\xc2\x3a\x08\x6b\x33\x65\x64\x78\x74\xe5\x31\xc1\x5a\xa8\xd1\x33\x0a\x9f\x71\x4e\x5f\xfa\x03\x00\x00\xff\xff\x7a\x84\x02\x07\x46\x00\x00\x00")

func templatesRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRequestTmpl,
		"templates/request.tmpl",
	)
}

func templatesRequestTmpl() (*asset, error) {
	bytes, err := templatesRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/request.tmpl", size: 70, mode: os.FileMode(420), modTime: time.Unix(1502190715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x3d\x6e\x84\x30\x10\x85\xfb\x9c\xe2\x15\x48\x34\xc8\x07\x40\xa2\x22\x29\xe8\xa2\x24\x17\xb0\xc8\x23\x41\x01\x83\x6c\x88\x16\x0d\xbe\xfb\xca\xe6\x4f\xda\x6a\xbb\xcf\x9e\xf7\x33\x23\x02\xab\xcd\x0f\xa1\x3e\xeb\x5f\xf6\xda\xc1\x7b\x11\xb4\x0d\xd4\x9b\x99\x7b\x78\xff\xc2\xdb\x38\xd8\x09\x0c\x4f\x11\xa8\xea\x15\x2b\x2a\x33\xd1\x36\xba\x66\xa9\x1d\xe1\x3d\x04\x57\xd4\xe1\x44\xd4\x87\x69\x81\x74\xc7\x34\x13\x01\xcd\x77\x98\x87\x26\x76\xd1\x7f\xb4\xb4\x47\xee\x73\x55\xc9\x1f\x97\x0c\xc9\xbf\xee\x66\x22\x2f\xa0\xde\xed\x30\xd2\x4e\x2d\xdd\xb9\x40\xd0\x60\x45\xa9\x7b\x76\x7b\x44\x1e\xff\x37\xd7\x0a\x17\x2f\xff\x60\x73\xf2\xd7\x32\x06\xd9\xe3\xaa\x1b\x5e\x74\x0f\x00\x00\xff\xff\x5f\x03\x2e\x86\x3d\x01\x00\x00")

func templatesSchemaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaTmpl,
		"templates/schema.tmpl",
	)
}

func templatesSchemaTmpl() (*asset, error) {
	bytes, err := templatesSchemaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.tmpl", size: 317, mode: os.FileMode(420), modTime: time.Unix(1502180279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xc1\x8e\xd3\x30\x14\xbc\xe7\x2b\x86\x5c\xda\xa2\x95\x59\x71\x4c\x59\x38\x94\x3d\xf4\x02\x2b\xca\x0d\x21\xad\x49\x5e\xb6\x16\x8d\x9d\xda\x0e\x6d\xe5\xfa\xdf\x91\x1d\x27\xcd\x6a\xb7\x1c\x38\xfa\x79\x3c\x33\x9a\x79\x16\x4d\xab\xb4\xc5\x5b\x70\x03\x53\x6e\xa9\xe1\x06\xb5\x56\x0d\x66\xec\x5d\x7f\x9e\x2d\xb3\x04\x72\x58\x7f\xa3\x7d\x47\xc6\xc2\x8f\x20\xdd\x4f\x66\xcb\x2c\xcb\xe8\x18\x71\x15\xd5\xbc\xdb\x59\x94\x3b\x6e\x0c\x9c\x03\xdb\x90\xfe\x23\x4a\x82\xf7\x70\x19\x90\xde\x64\x19\x50\x2a\x69\xac\xee\x4a\xab\xf4\x3c\x8d\x17\x11\x03\xd8\xad\x30\x2c\xcd\x70\x37\x3c\x5a\x66\x80\xcf\x10\x68\x35\x97\x4f\x04\xf6\xb5\x25\xcd\xad\x50\xd2\xc0\xa7\x1b\xb6\xfe\x0c\xef\xe7\x6e\x82\x7a\xe0\x9a\x37\x64\x49\x27\x54\x8f\xfb\xc2\x1b\xc2\x19\x2b\xde\xd0\x6e\xc5\x4d\x70\x78\xe3\x1c\x48\x56\x3d\xca\x17\xff\xc5\xe1\x1c\x0e\xc2\x6e\xc1\x42\x5e\x42\x53\xd5\xcf\x68\x17\x6f\x3f\x8d\x0a\x05\x46\xe4\x26\x86\x0d\xef\x53\x0b\x6c\x04\x05\x0d\x9c\xd1\x0e\xe2\xdf\x4f\xed\x4b\x9f\x8b\x89\xa4\x69\x95\x34\x14\x3c\x16\x0f\x5a\x35\xc2\xd0\x87\x09\xa9\x90\x15\x1d\xc1\x36\x96\xdb\xce\xac\x54\x45\x97\x07\xef\x6f\x6f\x71\x86\x4e\xe7\xa4\xf3\x71\xd4\x49\xbd\xc4\xca\xa0\xda\x18\x79\x01\x87\x1f\xbf\xe9\x54\xc0\x58\x2d\xe4\xd3\xcf\x02\x5c\x9e\xe0\x71\x07\x87\x86\xec\x56\x55\x05\xf2\x8b\xec\xfd\xd1\x92\x34\xb1\xac\xbc\xbf\xce\xe1\x7d\x7e\x83\x7d\x47\xfa\x54\xc0\x79\xf8\xe5\x10\xed\x6b\xb1\x07\xaa\xfa\x59\xb0\x11\x2d\x6a\xcc\xdf\x5c\x69\x63\x58\xa8\xb0\x52\x5a\x1d\x20\xe9\x80\x7b\xad\x95\x9e\xcf\xae\xbc\x80\x30\x71\xdf\x82\xc2\x6c\xd1\xfb\xf1\xd3\x42\x44\x0d\xda\x83\xad\x25\xf2\x68\x3c\x1f\x7c\xa4\x58\x58\x9c\xb2\x91\xde\xc7\x40\xae\x2e\x4b\x5c\x8c\x09\xe7\x2f\x55\xbd\xa4\x0c\xc3\x7f\xb3\x0c\xee\xc6\xb5\x08\x5f\xcd\x76\x5a\x3e\xfb\x4b\xcc\x90\xac\xe6\x8f\xaf\x77\x42\xb2\x6a\x95\x90\x36\xa8\x3f\xde\x0c\xda\x8b\xcb\xa7\x4b\xdc\xfe\x6f\x00\x00\x00\xff\xff\xa5\x08\x88\x69\x39\x04\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 1081, mode: os.FileMode(420), modTime: time.Unix(1502191183, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/request.tmpl": templatesRequestTmpl,
	"templates/schema.tmpl": templatesSchemaTmpl,
	"templates/service.tmpl": templatesServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"request.tmpl": &bintree{templatesRequestTmpl, map[string]*bintree{}},
		"schema.tmpl": &bintree{templatesSchemaTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

