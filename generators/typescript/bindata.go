// Code generated by go-bindata.
// sources:
// templates/request.tmpl
// templates/schema.tmpl
// templates/service.tmpl
// DO NOT EDIT!

package typescript

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\x7b\xa7\xf8\x47\x05\x27\xa8\x13\x78\x75\x83\x62\xa3\xe4\xf2\x53\x9b\x08\x8a\xb8\xbb\x4f\xee\x66\x3d\xa0\x0c\xe9\x7b\xd9\x04\xcb\x2a\xe7\x25\x1e\x78\x13\xe0\xc2\x3a\x08\x6b\x33\x65\x64\x78\x74\xe5\x31\xc1\x5a\xa8\xd1\x33\x0a\x9f\x71\x4e\x5f\xfa\x03\x00\x00\xff\xff\x7a\x84\x02\x07\x46\x00\x00\x00")

func templatesRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRequestTmpl,
		"templates/request.tmpl",
	)
}

func templatesRequestTmpl() (*asset, error) {
	bytes, err := templatesRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/request.tmpl", size: 70, mode: os.FileMode(420), modTime: time.Unix(1502190715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x3d\x6e\x84\x30\x10\x85\xfb\x9c\xe2\x15\x48\x34\xc8\x07\x40\xa2\x22\x29\xe8\xa2\x24\x17\xb0\xc8\x23\x41\x01\x83\x6c\x88\x16\x0d\xbe\xfb\xca\xe6\x4f\xda\x6a\xbb\xcf\x9e\xf7\x33\x23\x02\xab\xcd\x0f\xa1\x3e\xeb\x5f\xf6\xda\xc1\x7b\x11\xb4\x0d\xd4\x9b\x99\x7b\x78\xff\xc2\xdb\x38\xd8\x09\x0c\x4f\x11\xa8\xea\x15\x2b\x2a\x33\xd1\x36\xba\x66\xa9\x1d\xe1\x3d\x04\x57\xd4\xe1\x44\xd4\x87\x69\x81\x74\xc7\x34\x13\x01\xcd\x77\x98\x87\x26\x76\xd1\x7f\xb4\xb4\x47\xee\x73\x55\xc9\x1f\x97\x0c\xc9\xbf\xee\x66\x22\x2f\xa0\xde\xed\x30\xd2\x4e\x2d\xdd\xb9\x40\xd0\x60\x45\xa9\x7b\x76\x7b\x44\x1e\xff\x37\xd7\x0a\x17\x2f\xff\x60\x73\xf2\xd7\x32\x06\xd9\xe3\xaa\x1b\x5e\x74\x0f\x00\x00\xff\xff\x5f\x03\x2e\x86\x3d\x01\x00\x00")

func templatesSchemaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaTmpl,
		"templates/schema.tmpl",
	)
}

func templatesSchemaTmpl() (*asset, error) {
	bytes, err := templatesSchemaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.tmpl", size: 317, mode: os.FileMode(420), modTime: time.Unix(1502180279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4f\x8f\xd3\x3e\x10\xbd\xe7\x53\xbc\x5f\x2e\x6d\x7f\xaa\xcc\x8a\x63\xca\xc2\xa1\xec\xa1\x17\x58\x51\x6e\x08\x69\x4d\x33\xd9\x5a\x34\x76\x6a\x3b\xb4\x95\xeb\xef\x8e\xec\x38\x69\x96\x6e\x39\x70\xcc\xcc\xfb\x33\x99\x37\x16\x75\xa3\xb4\xc5\xff\xe0\x06\x66\xb3\xa5\x9a\x1b\x54\x5a\xd5\x98\xb0\x37\xdd\xf7\x64\x91\x25\x90\xc3\xea\x0b\xed\x5b\x32\x16\x7e\x00\xe9\xae\x32\x59\x64\x59\x46\xc7\x88\x2b\xa9\xe2\xed\xce\x62\xb3\xe3\xc6\xc0\x39\xb0\x35\xe9\x5f\x62\x43\xf0\x1e\x2e\x03\x12\xa7\x18\xf4\xb2\x0c\xd8\x28\x69\xac\x6e\x37\x56\xe9\xe9\x15\x60\x16\x79\x80\xdd\x0a\xc3\x52\x17\xf7\xbd\xd0\x22\x03\x7c\x86\x60\xa5\xb9\x7c\x26\xb0\xcf\x0d\x69\x6e\x85\x92\x06\x3e\x75\xd8\xea\x23\xce\x58\xf2\x9a\x76\x4b\x6e\xc2\x2c\x53\x37\x62\x3c\x72\xcd\x6b\xb2\xa4\x13\xa3\xe3\x7c\xe2\x35\xfd\xc1\x9a\x3b\x07\x92\x65\x87\xf2\xc5\x3f\x69\x38\x87\x83\xb0\x5b\xb0\xf0\x7b\x42\x53\xd9\xd5\x68\x17\xbb\x1f\x06\x87\x02\x03\x72\x1d\xc3\x80\xf7\x29\x25\x36\x80\x82\x07\xce\x68\x7a\xf3\xaf\xa7\xe6\x7a\xce\xd9\xc8\xd2\x34\x4a\x1a\x0a\x33\x16\x8f\x5a\xd5\xc2\xd0\xbb\x91\xa8\x90\x25\x1d\xc1\xd6\x96\xdb\xd6\x2c\x55\x49\x17\xc2\xdb\xbb\x3b\x9c\xa1\xd3\x77\xf2\x79\x3f\xf8\xa4\x8c\x62\x90\x50\x4d\x5c\x7f\x01\x87\x6f\x3f\xe9\x54\xc0\x58\x2d\xe4\xf3\xf7\x02\x5c\x9e\xe0\x71\x0f\x87\x9a\xec\x56\x95\x05\xf2\x8b\xed\xc3\xd1\x92\x34\x31\xb8\xbc\x6b\xe7\xf0\x3e\x9f\x63\xdf\x92\x3e\x15\x70\x1e\x7e\xd1\xaf\xf6\xb5\xb5\x07\xa9\xea\xc5\x62\x23\x5a\x54\x98\xfe\x77\x23\x8d\xfe\xb8\xc2\x79\x69\x75\x80\xa4\x03\x1e\xb4\x56\x7a\x3a\xb9\xc1\x80\x30\xf1\xf6\x82\xc3\x64\xd6\xcd\xe3\xc7\x81\x88\x0a\xb4\x07\x5b\x49\xe4\x71\xf0\xbc\x9f\x23\xad\x85\xc5\x2a\x1b\xe4\x7d\x5c\xc8\xcd\x63\x89\x87\x31\xd2\xfc\xa1\xca\x6b\xc9\x50\xfc\xbb\x4a\x3f\xdd\x70\x16\xe1\x29\xda\x56\xcb\x17\xef\x8a\x19\x92\xe5\xf4\xe9\xf5\x4c\x48\x96\x8d\x12\xd2\x06\xf7\xa7\x79\xef\x3d\xbb\x3c\xc0\xa4\xed\x7f\x07\x00\x00\xff\xff\xa9\x0c\xf0\x30\x59\x04\x00\x00")

func templatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceTmpl,
		"templates/service.tmpl",
	)
}

func templatesServiceTmpl() (*asset, error) {
	bytes, err := templatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service.tmpl", size: 1113, mode: os.FileMode(420), modTime: time.Unix(1502274341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/request.tmpl": templatesRequestTmpl,
	"templates/schema.tmpl": templatesSchemaTmpl,
	"templates/service.tmpl": templatesServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"request.tmpl": &bintree{templatesRequestTmpl, map[string]*bintree{}},
		"schema.tmpl": &bintree{templatesSchemaTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{templatesServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

