// Code generated by go-bindata.
// sources:
// templates/action.tmpl
// templates/api.tmpl
// templates/constant.tmpl
// templates/schema.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesActionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\x1a\x31\x14\xbc\xef\x57\xcc\x21\x52\xa0\x5a\xb9\xf7\x45\x51\x85\x28\x91\x22\xa1\x34\x0d\xe1\x84\x50\xe2\x38\x0f\xe2\x96\xf5\x6e\x6d\xd3\x96\xba\xfe\xf7\xca\xbb\xc6\x0b\xa4\x2b\x55\xe5\xc4\x7b\x33\xf3\xec\x37\x8c\x91\x65\x5d\x69\x0b\x07\x23\x5e\xa9\xe4\xf0\x58\xeb\xaa\xc4\xa5\xaa\x74\xc9\xb7\xf2\x97\xbe\x1c\x65\x91\xf3\x0e\xdc\x80\xd7\x32\x32\xd8\x7b\x5e\xcb\x33\x54\x98\x04\x8a\x4a\x19\xcb\x95\x3d\x63\x18\x91\x18\xed\x89\x1d\xee\x30\x19\xcf\x66\x8f\xe3\xbb\x9b\x74\x8b\x93\x31\x59\xb6\xde\x29\x61\x65\xa5\x20\x34\x71\x4b\xe3\xa6\x78\xd8\xd7\x64\x06\x76\x5f\xd3\x10\x2e\x03\x34\xd9\x9d\x56\xcd\x57\x60\x43\x16\x1f\xa7\xd7\xe3\xc5\xec\x61\x30\x84\x3b\x80\xc2\x2c\x9f\x2e\x5c\xd0\xf8\xa7\x15\x7c\x9e\xb8\xf7\xd3\xcf\x8b\xe9\xbc\x8f\xfb\x18\xe1\x53\xcd\x7c\x31\x99\x4c\xe7\xf3\x3e\x4d\x84\x4f\x35\xd7\xe3\x9b\x59\x9f\x20\x60\xab\x03\xdd\x67\x3e\xcb\x9c\x83\xe6\x6a\x43\xb8\xf8\x4a\xfb\x1c\x17\xdf\xf9\x76\x47\x28\xae\xc0\xe0\x7d\x46\x3f\x1b\xfb\x1a\xa7\xe0\x5c\x43\x82\xf7\x47\xee\xe0\xaa\xb1\xa3\x1b\xd3\x0e\xf0\xbe\x6d\xb2\x5b\x5e\x86\xaa\xf8\x8b\xaf\xc2\xb0\xc0\x08\x05\xbc\x1f\xe6\xad\x82\xd4\x4b\x50\xfb\x51\xd6\x15\xff\x77\xcb\x7f\xbc\xda\xa0\xe6\x9a\x97\xa6\x70\x1d\x93\xdd\x85\x16\x59\xd2\xa6\xa5\x1f\x09\x7e\x63\xc2\x4b\xda\x4e\xb8\x09\x62\xe7\xf0\x43\xda\x57\xb0\x7b\xfa\xb6\x93\x9a\x5e\xda\x1e\x6d\x1b\xf4\x43\x5a\xa1\x40\x62\xce\xe3\x6b\xf0\xbc\x96\x2c\x11\x8e\x9c\xc8\xbb\xc5\x01\x9f\xa3\x24\xcb\x87\x31\x74\x27\x09\x04\x96\x87\x58\xaf\x8a\xd4\x43\x10\xd7\x95\x54\xb6\x40\x3c\x22\x1a\xc2\xde\x6e\x3d\xcc\x93\x2a\x24\xc4\x14\x58\x9e\xfe\x2c\x87\x5c\xe6\x38\xeb\xc7\xec\xbd\xe9\x37\x11\xeb\xa6\x1e\x19\x64\xea\xb4\xba\x73\x90\x6b\xb0\xdb\xf8\x4f\xc0\x9f\xb7\x41\xdb\xbe\xda\x02\x46\xb0\x1e\xbb\xf3\x63\xbf\x92\x47\xe1\xe3\x0f\x47\x06\xb7\x0a\x7c\x7a\xfe\x42\xc2\x32\x6e\x8c\xdc\xa8\x81\x8b\x2e\xe6\x70\x68\xf7\x86\x8f\x9b\xfb\x51\x16\xc5\x7d\xd9\xfb\x13\x00\x00\xff\xff\x79\xc9\x1f\x6f\xc7\x04\x00\x00")

func templatesActionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesActionTmpl,
		"templates/action.tmpl",
	)
}

func templatesActionTmpl() (*asset, error) {
	bytes, err := templatesActionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/action.tmpl", size: 1223, mode: os.FileMode(420), modTime: time.Unix(1499946147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesApiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xd1\x6e\xec\x34\x10\x7d\xcf\x57\x1c\xaa\x4a\x49\xb8\x4b\x78\xcf\x92\x56\x55\x55\xa4\x82\xe8\x2d\x14\x9e\x10\xd2\x75\x93\x49\xd7\xb7\x89\x93\xb5\x1d\x4a\xc8\xf5\xbf\x23\x3b\x4e\xd6\x5b\xba\x95\xa0\x0f\x95\xbd\x33\x3e\x73\x7c\x3c\x67\xc2\xdb\xbe\x93\x1a\x5f\x83\x29\xec\x15\x6a\xd9\xb5\x88\xf7\x2a\xde\x46\x61\x64\x37\xb4\xfd\x12\x74\xeb\x78\x1b\x45\xd3\x04\xc9\xc4\x13\xe1\x5c\xb0\x96\x36\x38\x57\xe5\x8e\x5a\x86\xbc\x40\xf6\xe0\x96\x0a\xc6\x4c\x13\x78\xbd\xc4\xb2\x1b\x31\xb4\x30\x26\xa2\xbf\x1c\x38\xd9\xed\x34\xad\xe1\x3b\xd6\x12\xbe\xe0\x56\x68\x92\x35\x2b\xe9\x9a\x29\x82\x31\x98\x70\x28\xf6\x0a\x09\x36\x94\xd9\xa4\x02\xb1\x5f\xc6\x9b\x69\x02\x89\xca\xc6\x2d\x01\x6a\x1c\xcc\x52\x95\x2f\xf0\xff\xb5\xf4\x33\x8d\x1b\x9c\xff\xc9\x9a\x81\xec\x2d\x97\xa3\xf7\xb2\xeb\xd5\xca\xc5\x66\xe1\x0b\xae\x59\x4b\x8d\x07\xc9\xdd\xef\xf3\x39\x63\x5e\x93\x9b\x97\x87\xd5\x42\xb3\xec\x84\x72\xff\x6b\xfe\x84\x02\x53\x04\x3c\x32\x45\xbf\xc9\x26\x47\x1c\x6f\xa2\x43\x66\x3d\x88\x52\xf3\x4e\xa0\x1d\xbf\x27\x5d\xee\x12\x12\x55\xdf\x71\xa1\x37\xe8\x7a\x1b\x50\xa9\x3b\x3e\x23\xee\x88\x55\x24\x15\x0a\x7c\x7c\xfc\x4c\xa5\xce\x98\x52\xfc\x49\x24\x36\x03\xb8\x2a\x4b\xea\x75\x8e\x98\xf5\x7d\xc3\x4b\x66\x8f\x7f\xfb\x59\x75\x22\xde\xb8\x78\x7c\xdd\x09\x4d\x42\x7f\xf3\xeb\xd8\x53\x7c\x2a\xcf\xac\x95\x33\x5f\x2e\xdd\xae\x04\x1e\xbb\x6a\x44\xb1\x26\xb8\xed\xe5\xdc\x63\x59\x45\xa5\x15\x8e\xff\x4d\x3f\xd2\xa8\x92\x1f\x1e\x3e\xde\x65\x4a\x4b\x2e\x9e\x78\x3d\x26\xe1\x91\x34\x45\x8e\x41\x54\x54\x73\x41\xd5\x01\xbd\xeb\xf5\x1b\x77\x3b\x10\xda\x60\x72\x0c\x36\xab\x10\xc6\x71\x93\xa4\x07\x29\x50\x3b\x01\x05\xbd\xe0\x17\xda\x0f\xa4\xf4\xb1\x98\x2a\x4d\x33\xbd\x23\x91\x48\x52\x7d\x27\x14\xa1\xb8\x70\xba\x2c\xfb\xcc\x6a\x90\xf8\x24\xbb\x46\x71\x81\x59\xda\x85\x61\xc5\x34\x43\xe1\x2f\x7c\x74\x5d\x9b\xef\xc8\xd8\x3f\x5e\x23\xf9\x6a\x85\xed\x9e\xd3\x15\x66\x25\x7b\x2f\xbb\x96\x2b\xca\x24\xd9\xcb\x26\x16\x78\x3d\x6e\xa2\xe8\x28\xd7\x06\xe7\x98\x49\x23\x20\xdd\xbe\xd5\x40\xee\xf6\x57\xf7\xb7\xc9\x20\x9b\x37\x9b\x67\x11\x03\x85\xef\xcc\xcc\xf7\x24\x3e\x60\x90\x4d\x20\xe4\xe9\x5e\x74\x95\x4f\xba\x2a\xbb\x72\x54\x54\x60\xd8\xb9\xf4\xe2\x2d\x67\xf5\x69\x36\x9b\x87\x58\xac\xe5\xa7\x81\xf3\xb2\x31\x49\xe0\xdd\xec\x9e\x49\xd6\x92\x76\xef\x6d\x9c\x0c\x6b\xe6\xb1\x59\x03\x7b\x02\x26\xff\x5f\x18\xd3\x84\x17\xae\x77\xc8\x6c\x0f\x71\x49\xd5\xfc\x9b\x9f\x43\x97\x6b\x05\x37\x18\x32\xeb\xa4\x7f\x15\x4e\x03\x0c\xd5\xcf\xf3\xd4\x9e\xf0\x4f\xfe\x5d\x50\xf9\xf5\xcc\xba\x58\x81\x7c\xc7\xcc\xfa\xed\x07\x92\x63\x8e\x09\xbf\x3f\xd3\x98\x63\x76\xd5\x1f\x39\x98\x18\xe1\x24\x35\xdb\x20\xdb\x3f\xd6\x7b\xf9\x68\x49\xef\xba\x2a\xc7\x99\x25\xf3\x93\xdb\xc0\x98\x33\x78\xa0\x13\xc2\xcd\x5f\x84\x50\x9a\x68\x6d\xf7\x13\x7a\x1e\x5a\x5f\xef\x64\xf7\x02\x6b\xcf\x1b\x29\x3b\x99\xc4\x27\x4e\x80\x2b\x48\x5f\x21\xf6\x9e\x38\x4c\xdb\x99\x02\xed\x91\xdd\x0a\x9c\x39\x61\xce\x16\x1e\x6e\x97\x05\x6d\x64\xaf\x7a\xf2\x99\xdd\x93\x06\x58\x76\xb2\xac\x50\x47\x13\xee\x5d\x94\x85\xd5\xfa\xfe\xcb\x33\xfc\x6c\xd9\x3c\x38\xe9\x51\x60\xaf\x82\x61\xe8\x88\xda\x69\xa6\x9e\x79\x7f\x37\x34\x8d\xca\xa1\xa5\xf5\x81\xbf\x6f\x38\xd1\xac\xa7\x3f\x59\x02\x37\x8b\x81\x8d\x39\x9f\x42\xf4\x4b\xc4\x97\xf1\x87\xf0\x17\xfb\x99\x31\x9f\x0e\xbe\x75\x73\x7d\xb6\xd8\xf2\xfd\xda\x86\xdf\xad\x7f\x02\x00\x00\xff\xff\x3c\x41\xaf\x5b\x4c\x08\x00\x00")

func templatesApiTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesApiTmpl,
		"templates/api.tmpl",
	)
}

func templatesApiTmpl() (*asset, error) {
	bytes, err := templatesApiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/api.tmpl", size: 2124, mode: os.FileMode(420), modTime: time.Unix(1500549527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConstantTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\xc8\x2f\x2a\x51\x48\xce\xcf\x2b\x2e\x51\x70\x76\xf4\xf1\x89\x77\x0c\xf0\x54\xb0\x55\x50\x87\xb1\xd5\xad\xb9\xb8\xaa\xab\x15\x8a\x12\xf3\xd2\x53\x15\x54\xb2\x53\x2b\x75\x14\x54\xca\x12\x73\x4a\x53\x15\xac\x6c\x15\xf4\x14\x6a\x6b\xb9\x14\x14\x10\xf2\x10\x19\xb0\x20\x8a\xc9\xd5\xd5\x0a\x7a\x21\x95\x05\x20\x29\x90\xe1\x48\x5c\x75\x6b\x3c\x6a\xe3\x83\x5c\x03\x43\x5d\x83\x43\xd0\xf4\xc0\x84\xf1\xeb\x0d\x0e\x75\x76\x76\x0d\x0e\x46\xd7\x0b\x15\xc6\xaf\xd7\xcd\xd1\xd3\x07\x5d\x23\x48\x0c\xac\xab\xba\x5a\x21\x35\x2f\x05\xe4\x4b\x38\x0b\x10\x00\x00\xff\xff\x7f\xf8\x39\xd1\x47\x01\x00\x00")

func templatesConstantTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesConstantTmpl,
		"templates/constant.tmpl",
	)
}

func templatesConstantTmpl() (*asset, error) {
	bytes, err := templatesConstantTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/constant.tmpl", size: 327, mode: os.FileMode(420), modTime: time.Unix(1497322005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\x41\x4e\x03\x31\x0c\x45\xf7\x73\x8a\xaf\xaa\xd2\x14\x69\x94\x03\xb4\xea\x6a\x60\x5b\xb8\x82\x3b\xb8\x30\x90\x64\x4a\x92\x02\xc5\xf5\xdd\x51\x9a\x92\x45\xc5\x0a\x89\x9d\xed\xbc\x67\xff\x8c\x6e\x3f\x85\x04\x41\x1c\x9e\xd9\x11\x14\xbb\x30\x39\xb4\x7e\x0a\x8e\xec\xf8\x15\xda\x55\xd3\x34\x22\x08\xe4\x9f\x18\x06\xaa\x22\x18\x77\x30\x9b\x0b\x41\x5b\xcb\x75\xca\x6f\x30\xbd\xa5\x18\x31\xbb\xdf\xbe\xf0\x90\x66\x50\x6d\xf8\xf3\x7c\x64\x98\x7c\x4c\x10\x81\xd9\x90\x63\x9c\xd0\x93\x63\xdb\x53\xcc\x3e\xd6\xf0\xfc\x71\x89\x61\x8a\xbc\x10\xd4\xcb\xf3\x57\x3e\x76\x98\xbf\x93\x3d\x30\x96\x6b\x98\x5b\xde\xc7\xbc\x1c\x99\xc9\xaf\x57\x0b\x97\xe7\x79\xe1\x55\x3b\x11\xb0\x7f\xcc\x82\xde\xac\x72\x63\x23\x5f\x25\xbe\xf3\x69\x4c\xc7\x3f\x26\x2e\xf2\xa2\xfd\x15\x3e\xe1\xc1\x1e\x02\xfd\x98\x6d\x87\xff\xfc\x59\x69\x6a\x55\x8b\xef\x00\x00\x00\xff\xff\x3c\xc8\xb7\x0d\xec\x01\x00\x00")

func templatesSchemaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaTmpl,
		"templates/schema.tmpl",
	)
}

func templatesSchemaTmpl() (*asset, error) {
	bytes, err := templatesSchemaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.tmpl", size: 492, mode: os.FileMode(420), modTime: time.Unix(1501150048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/action.tmpl": templatesActionTmpl,
	"templates/api.tmpl": templatesApiTmpl,
	"templates/constant.tmpl": templatesConstantTmpl,
	"templates/schema.tmpl": templatesSchemaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"action.tmpl": &bintree{templatesActionTmpl, map[string]*bintree{}},
		"api.tmpl": &bintree{templatesApiTmpl, map[string]*bintree{}},
		"constant.tmpl": &bintree{templatesConstantTmpl, map[string]*bintree{}},
		"schema.tmpl": &bintree{templatesSchemaTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

