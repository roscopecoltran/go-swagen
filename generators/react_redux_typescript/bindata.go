// Code generated by go-bindata.
// sources:
// templates/action.tmpl
// templates/api.tmpl
// templates/constant.tmpl
// templates/schema.tmpl
// DO NOT EDIT!

package reactReduxTypescript

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesActionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\x1a\x31\x14\xbc\xef\x57\xcc\x21\x52\xa0\x5a\xb9\xf7\x45\x51\x85\x28\x91\x22\xa1\x34\x0d\xe1\x84\x50\xe2\x38\x0f\xe2\x96\xf5\x6e\x6d\xd3\x96\xba\xfe\xf7\xca\xbb\xc6\x0b\xa4\x2b\x55\xe5\xc4\x7b\x33\xf3\xec\x37\x8c\x91\x65\x5d\x69\x0b\x07\x23\x5e\xa9\xe4\xf0\x58\xeb\xaa\xc4\xa5\xaa\x74\xc9\xb7\xf2\x97\xbe\x1c\x65\x91\xf3\x0e\xdc\x80\xd7\x32\x32\xd8\x7b\x5e\xcb\x33\x54\x98\x04\x8a\x4a\x19\xcb\x95\x3d\x63\x18\x91\x18\xed\x89\x1d\xee\x30\x19\xcf\x66\x8f\xe3\xbb\x9b\x74\x8b\x93\x31\x59\xb6\xde\x29\x61\x65\xa5\x20\x34\x71\x4b\xe3\xa6\x78\xd8\xd7\x64\x06\x76\x5f\xd3\x10\x2e\x03\x34\xd9\x9d\x56\xcd\x57\x60\x43\x16\x1f\xa7\xd7\xe3\xc5\xec\x61\x30\x84\x3b\x80\xc2\x2c\x9f\x2e\x5c\xd0\xf8\xa7\x15\x7c\x9e\xb8\xf7\xd3\xcf\x8b\xe9\xbc\x8f\xfb\x18\xe1\x53\xcd\x7c\x31\x99\x4c\xe7\xf3\x3e\x4d\x84\x4f\x35\xd7\xe3\x9b\x59\x9f\x20\x60\xab\x03\xdd\x67\x3e\xcb\x9c\x83\xe6\x6a\x43\xb8\xf8\x4a\xfb\x1c\x17\xdf\xf9\x76\x47\x28\xae\xc0\xe0\x7d\x46\x3f\x1b\xfb\x1a\xa7\xe0\x5c\x43\x82\xf7\x47\xee\xe0\xaa\xb1\xa3\x1b\xd3\x0e\xf0\xbe\x6d\xb2\x5b\x5e\x86\xaa\xf8\x8b\xaf\xc2\xb0\xc0\x08\x05\xbc\x1f\xe6\xad\x82\xd4\x4b\x50\xfb\x51\xd6\x15\xff\x77\xcb\x7f\xbc\xda\xa0\xe6\x9a\x97\xa6\x70\x1d\x93\xdd\x85\x16\x59\xd2\xa6\xa5\x1f\x09\x7e\x63\xc2\x4b\xda\x4e\xb8\x09\x62\xe7\xf0\x43\xda\x57\xb0\x7b\xfa\xb6\x93\x9a\x5e\xda\x1e\x6d\x1b\xf4\x43\x5a\xa1\x40\x62\xce\xe3\x6b\xf0\xbc\x96\x2c\x11\x8e\x9c\xc8\xbb\xc5\x01\x9f\xa3\x24\xcb\x87\x31\x74\x27\x09\x04\x96\x87\x58\xaf\x8a\xd4\x43\x10\xd7\x95\x54\xb6\x40\x3c\x22\x1a\xc2\xde\x6e\x3d\xcc\x93\x2a\x24\xc4\x14\x58\x9e\xfe\x2c\x87\x5c\xe6\x38\xeb\xc7\xec\xbd\xe9\x37\x11\xeb\xa6\x1e\x19\x64\xea\xb4\xba\x73\x90\x6b\xb0\xdb\xf8\x4f\xc0\x9f\xb7\x41\xdb\xbe\xda\x02\x46\xb0\x1e\xbb\xf3\x63\xbf\x92\x47\xe1\xe3\x0f\x47\x06\xb7\x0a\x7c\x7a\xfe\x42\xc2\x32\x6e\x8c\xdc\xa8\x81\x8b\x2e\xe6\x70\x68\xf7\x86\x8f\x9b\xfb\x51\x16\xc5\x7d\xd9\xfb\x13\x00\x00\xff\xff\x79\xc9\x1f\x6f\xc7\x04\x00\x00")

func templatesActionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesActionTmpl,
		"templates/action.tmpl",
	)
}

func templatesActionTmpl() (*asset, error) {
	bytes, err := templatesActionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/action.tmpl", size: 1223, mode: os.FileMode(420), modTime: time.Unix(1499946147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesApiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xd1\x6e\xec\x34\x10\x7d\xcf\x57\x1c\xaa\x4a\x49\xb8\x4b\x78\xcf\x92\x56\x55\x55\xa4\x82\xe8\x2d\x14\x9e\x10\xd2\x75\x93\x49\xd7\xb7\x89\x93\xb5\x1d\x4a\x48\xfd\xef\xc8\x8e\x93\xf5\x42\xb7\x42\xb7\x0f\x95\xbd\x9e\x39\x73\x7c\x3c\x67\xc2\xdb\xbe\x93\x1a\x5f\x83\x29\xec\x15\x6a\xd9\xb5\x88\xf7\x2a\xde\x46\xe1\xc9\x6e\x68\xfb\xe5\xd0\xad\xe3\x6d\x14\x4d\x13\x24\x13\x4f\x84\xec\xa1\xdc\x51\xcb\x14\x8c\x99\x26\xf0\x1a\xd9\x8d\x18\x5a\x18\x13\xd1\x5f\x0e\x83\xec\x76\x9a\x90\xdd\xb1\x96\xf0\x8a\x5b\xa1\x49\xd6\xac\xa4\x6b\xa6\x08\xc6\x60\xc2\x01\x6c\xc9\x85\xcb\xb0\xa7\x05\x62\xbf\x8c\x37\xd3\x04\x12\x95\x3d\xb7\xb5\xa8\x71\xf9\x4b\x1d\xbe\xe0\xfe\xdf\x62\xe7\xcf\x34\x6e\x70\xfe\x27\x6b\x06\x42\x5e\x20\xbb\x97\x5d\xaf\xd6\xea\xf6\x18\xaf\xb8\x66\x2d\x35\x3e\x3b\x77\xbf\xcf\x09\xc6\xfc\x9b\xce\xbc\x3c\xac\x16\x62\x65\x27\x94\xfb\x5f\xf3\x27\x14\x98\x22\xe0\x91\x29\xfa\x4d\x36\x39\xe2\x78\x13\x1d\x22\xeb\x41\x94\x9a\x77\x02\xed\xf8\x3d\xe9\x72\x97\x90\xa8\xfa\x8e\x0b\xbd\x41\xd7\xdb\x03\x95\xba\xf4\x19\x71\x47\xac\x22\xa9\x50\xe0\xe3\xe3\x67\x2a\x75\xc6\x94\xe2\x4f\x22\xb1\x11\xc0\x55\x59\x52\xaf\x73\xc4\xac\xef\x1b\x5e\x32\x9b\xfe\xed\x67\xd5\x89\x78\xe3\xce\xe3\xeb\x4e\x68\x12\xfa\x9b\x5f\xc7\x9e\xe2\x53\x71\x66\xad\x9c\xf9\x72\xe9\x76\x25\xf0\xd8\x55\x23\x8a\x35\xc0\x6d\x2f\xe7\x76\xc9\x2a\x2a\xad\x70\xfc\x6f\xfa\x91\x46\x95\xfc\xf0\xf0\xf1\x2e\x53\x5a\x72\xf1\xc4\xeb\x31\x09\x53\xd2\x14\x39\x06\x51\x51\xcd\x05\x55\x07\xf4\xae\xd7\x6f\xdc\xed\x40\x68\x83\xc9\x31\xd8\xac\x42\x18\xc7\x4d\x92\x1e\xa4\x40\xed\x04\x14\xf4\x82\x5f\x68\x3f\x90\xd2\xc7\x62\xaa\x34\xcd\xf4\x8e\x44\x22\x49\xf5\x9d\x50\x84\xe2\xc2\xe9\xb2\xec\x33\xab\x41\xe2\x83\xec\x1a\xc5\x05\x66\x69\x17\x86\x15\xd3\x0c\x85\xbf\xf0\xd1\x75\x6d\xbc\x23\x63\xff\x78\x8d\xe4\xab\x15\xb6\x7b\x4e\x57\x98\x95\xec\xbd\xec\x5a\xae\x28\x93\x64\x2f\x9b\x58\xe0\x35\xdd\x44\xd1\x51\xac\x3d\x9c\xcf\x4c\x1a\x01\xe9\xf6\xad\x06\x72\xb7\xbf\xba\xbf\x4d\x06\xd9\xbc\xd9\x3c\x8b\x18\x28\x7c\x67\x66\xbe\x27\xf1\x01\x83\x6c\x02\x21\x4f\xf7\xa2\xab\x7c\xda\x4e\x57\x8e\x8a\x0a\x2c\x3a\x97\x5e\xbc\xe5\xcc\x3d\xcd\x66\xf3\x10\x8b\xb5\xbc\xff\x9d\x89\x8d\x49\xc2\x09\x71\xcf\x24\x6b\x49\xbb\xf7\x36\x4e\x86\xc0\xee\xa1\x59\x03\x7b\x02\x26\xff\x22\x8c\x69\xc2\x0b\xd7\x3b\x64\xb6\x87\xb8\xa4\x6a\xfe\xcd\x4f\x9e\xcb\xb5\x82\x1b\x0c\x99\x75\xd2\x7f\x0a\xa7\x01\x86\xea\xe7\x61\x69\x33\xfc\x93\x7f\xf7\xce\xb0\xba\x58\x81\x7c\xc7\xcc\xfa\xed\x07\x92\x63\x8e\x09\xbf\x3f\xd3\x98\x63\x76\xd5\x1f\x39\x98\x18\xe1\x24\x35\xdb\x20\xda\x3f\xd6\x7b\xf1\x68\x49\xef\xba\x2a\xc7\x99\x25\xf3\x93\xdb\xc0\x98\x33\x78\xa0\x13\xc2\xf9\x71\x1f\x48\x13\xad\xed\x7e\x42\xcf\x43\xeb\xeb\x9d\xec\x5e\x60\xed\x79\x23\x65\x27\x93\xf8\x44\x06\xb8\x82\xf4\x15\x62\xef\x89\xc3\xb4\x9d\x29\xd0\x1e\xd9\xad\xc0\x99\x13\xe6\x6c\xe1\xe1\x76\x59\xd0\x46\xf6\xaa\x27\x9f\xd9\x3d\x69\x80\x65\x27\xcb\x0a\x75\x34\xe1\xde\x45\x59\x58\xad\xef\xbf\x3c\xc3\xcf\x96\xcd\x83\x93\x1e\x05\xf6\x2a\x18\x86\x8e\xa8\x9d\x66\xea\x99\xf7\x77\x43\xd3\xa8\x1c\x5a\x5a\x1f\xf8\xfb\x86\x13\xcd\x7a\xfa\x93\x25\x70\xb3\x18\xd8\x98\xf3\x29\x44\xbf\x44\x7c\x19\x7f\x08\x7f\xb1\x9f\x19\xf3\xe9\xe0\x5b\x37\xd7\x67\x8b\x2d\xdf\xaf\x6d\xf8\xdd\xfa\x27\x00\x00\xff\xff\x65\xe5\x62\x8a\x17\x08\x00\x00")

func templatesApiTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesApiTmpl,
		"templates/api.tmpl",
	)
}

func templatesApiTmpl() (*asset, error) {
	bytes, err := templatesApiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/api.tmpl", size: 2071, mode: os.FileMode(420), modTime: time.Unix(1500003025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConstantTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\xc8\x2f\x2a\x51\x48\xce\xcf\x2b\x2e\x51\x70\x76\xf4\xf1\x89\x77\x0c\xf0\x54\xb0\x55\x50\x87\xb1\xd5\xad\xb9\xb8\xaa\xab\x15\x8a\x12\xf3\xd2\x53\x15\x54\xb2\x53\x2b\x75\x14\x54\xca\x12\x73\x4a\x53\x15\xac\x6c\x15\xf4\x14\x6a\x6b\xb9\x14\x14\x10\xf2\x10\x19\xb0\x20\x8a\xc9\xd5\xd5\x0a\x7a\x21\x95\x05\x20\x29\x90\xe1\x48\x5c\x75\x6b\x3c\x6a\xe3\x83\x5c\x03\x43\x5d\x83\x43\xd0\xf4\xc0\x84\xf1\xeb\x0d\x0e\x75\x76\x76\x0d\x0e\x46\xd7\x0b\x15\xc6\xaf\xd7\xcd\xd1\xd3\x07\x5d\x23\x48\x0c\xac\xab\xba\x5a\x21\x35\x2f\x05\xe4\x4b\x38\x0b\x10\x00\x00\xff\xff\x7f\xf8\x39\xd1\x47\x01\x00\x00")

func templatesConstantTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesConstantTmpl,
		"templates/constant.tmpl",
	)
}

func templatesConstantTmpl() (*asset, error) {
	bytes, err := templatesConstantTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/constant.tmpl", size: 327, mode: os.FileMode(420), modTime: time.Unix(1497322005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\xc1\x4e\xc3\x30\x0c\x86\xef\x7d\x8a\x5f\xd3\xa4\x0c\x69\xca\x03\x74\xda\x01\x15\xae\x83\x57\x70\x3b\x0f\x02\x49\x3a\x92\x14\x18\x5e\xde\x1d\x65\x2d\x3d\x4c\x9c\x90\xb8\x39\xce\xf7\xd9\xbf\x8d\x3b\xf6\x21\x41\x10\xbb\x67\x76\x84\x8c\x43\xe8\x1d\x94\xef\x83\x23\x6b\xbe\x82\xda\x54\x55\x25\x82\x40\xfe\x89\xa1\x91\xb3\x08\xcc\x01\x7a\x37\x11\xd4\x5a\x9e\xbb\xfc\x06\xdd\x58\x8a\x11\x8b\x87\xf6\x85\xbb\xb4\x40\xce\x15\x7f\x5e\x96\x74\xbd\x8f\x09\x22\xd0\x3b\x72\x8c\x33\x1a\x72\x6c\x1b\x8a\xc5\xc7\x16\x9e\x3f\xa6\x18\x7a\x94\x57\x82\x79\xf3\xf2\x95\x4f\x6b\x2c\xdf\xc9\x0e\x8c\x7a\x0b\x7d\xc7\xc7\x58\x86\xa3\x30\xe5\xf7\x6a\x60\x7d\xe9\x8f\x7c\xce\x6b\x11\xb0\xdf\x17\x21\xdf\x6c\xca\xc3\x46\xbe\x4a\x7c\xef\x93\x49\xa7\x3f\x26\x1e\xe5\x95\xfa\x15\x3e\xe3\xd1\x0e\x81\x7e\x4c\xb5\xc6\xff\x5c\x56\xe6\x9a\xfd\x6d\x4a\xc1\xb4\x43\xe2\x1a\x6a\x08\x46\x61\xba\x78\x84\xe6\x6a\x2e\xbe\x03\x00\x00\xff\xff\x97\xdf\xa2\x7b\x04\x02\x00\x00")

func templatesSchemaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaTmpl,
		"templates/schema.tmpl",
	)
}

func templatesSchemaTmpl() (*asset, error) {
	bytes, err := templatesSchemaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.tmpl", size: 516, mode: os.FileMode(420), modTime: time.Unix(1500018173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/action.tmpl":   templatesActionTmpl,
	"templates/api.tmpl":      templatesApiTmpl,
	"templates/constant.tmpl": templatesConstantTmpl,
	"templates/schema.tmpl":   templatesSchemaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"action.tmpl":   &bintree{templatesActionTmpl, map[string]*bintree{}},
		"api.tmpl":      &bintree{templatesApiTmpl, map[string]*bintree{}},
		"constant.tmpl": &bintree{templatesConstantTmpl, map[string]*bintree{}},
		"schema.tmpl":   &bintree{templatesSchemaTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
