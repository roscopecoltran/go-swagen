import * as qs from 'qs';
import * as humps from 'humps';

{{ range .Schemas }}{{ if .Enum }}
export enum {{ .Name | InterfaceCase }} { {{ range .Enum }}
  {{ . }} = '{{ . }}',{{ end }}
}{{ else }}
export interface {{ .Name | InterfaceCase }} { {{ range $key, $value := .Props }}
  {{ $key | CamelCase }}: {{ $value }},{{ end }}
}{{ end }}
{{ end }}

export const config = {
  baseUrl: '',
}

export function myFetch(endpoint, options) {
  const headers = Object.assign({
    Accept: 'application/json',
    'Content-Type': 'application/json',
  }, options.headers);
  const body = options.body ? humps.decamelizeKeys(JSON.stringify(options.body)) : null;
  const opts = Object.assign({}, options, {body, headers});
  return fetch(new Request(endpoint, opts)).then(response =>
    response.json().then(json => {
      const data = humps.camelizeKeys(json);
      if (!response.ok) {
        return Promise.reject(data);
      }

      return data;
    })
  );
}

export function fetchAPI(url, options) {
  const endpoint = config.baseUrl + url;
  return myFetch(endpoint, options);
}

{{ range $key, $value := .Actions }}
export const {{ $key }} = {
  {{ range $value }}
  {{ .Name }}({ {{ range .Parameters }}
    {{ .Name | CamelCase }},{{ end }}
  }:{ {{ range .Parameters }}
    {{ .Name | CamelCase }}{{ with .Required }}{{ else }}?{{ end }}: {{ .Type }},{{ end }}
  }){{ with .RespSchema }}:Promise<{{ .Name | InterfaceCase }}>{{ end }} {
    const query: { [key: string]: any } = {};
    const options: { [key: string]: any } = {};
  {{ range .Parameters }}{{ if .Required }}
    if (!{{ .Name | CamelCase }}) {
      throw new Error('{{ .Name | CamelCase }} is required');
    }{{ end }}{{ if eq .In "query" }}
    query.{{ .Name }} = {{ .Name | CamelCase }}{{ else if eq .In "body" }}
    options.body = {{ .Name | CamelCase }}{{ end }}{{ end }}
    const QueryString = qs.stringify(query, { skipNulls: true });
    return fetchAPI(`{{ .Endpoint }}${QueryString ? '?'+QueryString : ''}`, options)
  },
  {{ end }}
};
{{ end }}

